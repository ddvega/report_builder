"""
 Program:      Holiday Ordering Tool
 Author:       David Vega
 Date:         9/8/19
 Description:  The purpose of this program is to clean and create usable excel
               sheets out of data extracted from a pdf file converted using PDF
               converter. This program is specifically designed for pdf
               reports generated by company X. This prram is intended to work
               exclusively with reports from company X.
"""

from PyQt5.QtWidgets import QMainWindow, QApplication
from MainWindow import Ui_MainWindow
from source_code.inventory import Inventory
from source_code.sales import Sales
from source_code.functions import output_msg


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.inventory = Inventory()
        self.start.pressed.connect(self.submit)
        self.show()

    def submit(self):
        self.progressBar.reset()
        value = self.comboBox.currentText()

        if value == "Read Data From Order Guide":
            try:
                self.inventory.import_from_order_guide(self.outputBox, self.progressBar)
            except Exception:
                output_msg('An Error Occured', 0, self.outputBox, self.progressBar)

        elif value == "Section Names XLSX to JSON":
            try:
                self.inventory.excel_to_sect_names_json(self.outputBox, self.progressBar)
            except Exception:
                output_msg('An Error Occured', 0, self.outputBox, self.progressBar)

        if value == "Prices XLSX to JSON":
            try:
                self.inventory.excel_to_prices_json(self.outputBox, self.progressBar)
            except Exception:
                output_msg('An Error Occured', 0, self.outputBox, self.progressBar)

        elif value == "Pack Sizes XLSX to JSON":
            try:
                self.inventory.excel_to_pack_sizes_json(self.outputBox, self.progressBar)
            except Exception:
                output_msg('An Error Occured', 0, self.outputBox, self.progressBar)

        elif value == "Create Sales Report":
            try:
                self.outputBox.clear()
                output_msg("Loading Prices from JSON file.", 1, self.outputBox, self.progressBar)
                prices = self.inventory.load_prices()
                output_msg("Loading pack sizes from JSON file.", 3, self.outputBox, self.progressBar)
                pack_sizes = self.inventory.load_pack_sizes()
                output_msg("Loading section names from JSON file.", 5, self.outputBox, self.progressBar)
                sect_names = self.inventory.load_sec_names()
                sales = Sales(prices, pack_sizes, sect_names, self.outputBox, self.progressBar)
                sales.clean_sales()
                sales.build_report()

            except Exception:
                output_msg('An Error Occured', 0, self.outputBox, self.progressBar)


if __name__ == '__main__':
    app = QApplication([])
    app.setApplicationName("Inventory")
    window = MainWindow()
    app.exec_()
